# This is the main configuration file for the application.
# ~~~~~
application.name=linkit

# All the secrets conf data for all environments
@include.secrets = secrets.conf

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod
%geekweavers.application.mode=prod
%cloudbees.application.mode=prod
%cloudbeestest.application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=gA0nRjsBoxgTRjIblhETG3ap8hiqQ9qwG1fAnttNmxur74C2lRjDvqwXtNY7Netr
# Salt for password storage, renew before prod !
application.salt=931778f2c6419c959b1b1b53cf68c130539b933d95ba137ced85694d690e6ffb


# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja
application.langs=fr,en

# Date format
# ~~~~~
date.format=yyyy-MM-dd
# date.format.fr=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
# http.port=9000
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
# application.session.secure=false
# CLA 22/01/2012 : remember session for one year, hopefully.
application.session.maxAge=365d

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com


# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
java.source=1.6
jvm.memory=-Xmx512M -Xms128M -XX:PermSize=128m -XX:MaxPermSize=1024m

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
# application.log=INFO
#
# More logging configuration
# application.log.path=/log4j.properties
# application.log.system.out=off
%cloudbeestest.application.log=DEBUG


# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)

# CLA 27/11/2011 : MVCC=TRUE to enable row-locking instead of default table-locking. cf. http://stackoverflow.com/questions/4162557/timeout-error-trying-to-lock-table-in-h2 and http://www.h2database.com/html/advanced.html#mvcc
# CLA 14/12/2011 : LOCK_TIMEOUT=25000 for lick timeout set to 25 s.
db.url=jdbc:h2:mem:play;MODE=MYSQL;MVCC=TRUE;LOCK_TIMEOUT=25000
# db=postgres://linkit:linkit@localhost/linkit

#
# To connect to a local MySQL5 database, use:
# db=mysql://user:pwd@host/database
#
# To connect to a local PostgreSQL9 database, use:
# db=postgres://cedric@localhost/linkit
#
# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret

# CloudBees Database configuration
# ~~~~~
# to deploy on cloudbees: uncomment, replace yourProject, yourDBName, login and password by the correct values
# and switch to the cloudbees profile before generating the war
%cloudbees.db.driver=com.mysql.jdbc.Driver
%cloudbees.jpa.dialect=org.hibernate.dialect.MySQLDialect
%cloudbeestest.db.driver=com.mysql.jdbc.Driver
%cloudbeestest.jpa.dialect=org.hibernate.dialect.MySQLDialect
%cloudfoundry.db.driver=com.mysql.jdbc.Driver
%cloudfoundry.jpa.dialect=org.hibernate.dialect.MySQLDialect

#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
jpa.dialect=org.hibernate.dialect.H2Dialect

#
# Specify the ddl generation pattern to use. Set to none to disable it 
# (default to update in DEV mode, and none in PROD mode):
jpa.ddl=create
evolutions.enabled=false
%geekweavers.jpa.ddl=update
%cloudbees.jpa.ddl=none
%cloudbees.evolutions.enabled=true
%cloudbeestest.jpa.ddl=none
%cloudbeestest.evolutions.enabled=true
%cloudfoundry.jpa.ddl=none
%cloudfoundry.evolutions.enabled=true

#
# Debug SQL statements (logged using DEBUG level):
jpa.debugSQL=true
%geekweavers.jpa.debugSQL=false
%cloudbees.jpa.debugSQL=false
%cloudbeestest.jpa.debugSQL=true
%cloudfoundry.jpa.debugSQL=false

javax.persistence.lock.timeout=10000
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# CLA 29/01/2012 : 1 week (advised by Google's Page Speed Test)
http.cacheControl=604800

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
mail.smtp=mock

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/
application.baseUrl=http://localhost:9000/
%geekweavers.application.baseUrl=http://linkit.geekweavers.net/
%cloudbees.application.baseUrl=http://www.mix-it.fr/
%cloudbeestest.application.baseUrl=http://www.mix-it.fr/
%cloudfoundry.application.baseUrl=http://www.mix-it.fr/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files 
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
%test.play.tmp=none 
%test.application.mode=dev
%test.db.url=jdbc:h2:mem:play;MODE=MYSQL;LOCK_MODE=0
%test.jpa.ddl=create
%test.mail.smtp=mock

# Timeout of WS requests to fetch user timeline on a social network
# Keep low : we fetch regularly, and we'll try again soon after when it will be more reactive
linkit.timeline.fetch.timeout=10s
# Period in minutes between two consecutive fetches for the same account
linkit.timeline.fetch.period=30
# Delay in seconds where the job while be launched after a member's profile update (to avoid transaction collision)
linkit.job.delayAfterMemberUpdate=2

# OAuth providers
# provider.requestTokenUrl : OAuth protocol
# provider.accessTokenUrl : OAuth protocol
# provider.authorizeUrl : OAuth protocol
# provider.consumerKey : OAuth protocol
# provider.consumerSecret : OAuth protocol
# provider.scope : Optional, requested scope
# provider.userProfileJsonUrl : custom, REST url for retrieving user profil as Json resource
Twitter.requestTokenUrl=https://api.twitter.com/oauth/request_token
Twitter.accessTokenUrl=https://api.twitter.com/oauth/access_token
Twitter.authorizeUrl=https://api.twitter.com/oauth/authenticate
Twitter.consumerKey=MZOi3DxRcdQVPSIVKmQQA
Twitter.consumerSecret=UH6dzqQ9osUN2XBUlhY3n9KPruSMVS6CmCM3lpMFHiI
Twitter.userProfileJsonUrl=https://api.twitter.com/1.1/account/verify_credentials.json

# Google OAuth isn't possible on localhost. Have to use a real domain, like www.geekweavers.net, and put as localhost alias on your etc/hosts for local development.
Google.requestTokenUrl=https://www.google.com/accounts/OAuthGetRequestToken
Google.accessTokenUrl=https://www.google.com/accounts/OAuthGetAccessToken
Google.authorizeUrl=https://www.google.com/accounts/OAuthAuthorizeToken
# Google Key de test pour Dev Mode
Google.consumerKey=geekweavers.net
Google.consumerSecret=dkYI9wmZHKaqlSu7mAj75MPF
Google.scope=https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
Google.userProfileJsonUrl=https://www.googleapis.com/oauth2/v1/userinfo?alt=json
Google.apiKey=AIzaSyC4xOkQsEPJcUKUvQGL6T7RZkrIIxSuZAg
# LinkedIn Key de test pour Dev Mode
LinkedIn.requestTokenUrl=https://api.linkedin.com/uas/oauth/requestToken
LinkedIn.accessTokenUrl=https://api.linkedin.com/uas/oauth/accessToken
LinkedIn.authorizeUrl=https://www.linkedin.com/uas/oauth/authenticate
LinkedIn.consumerKey=r2jlsjgqntqp
LinkedIn.consumerSecret=5cJRDTE48h2x8a0U
LinkedIn.userProfileJsonUrl=http://api.linkedin.com/v1/people/~:(id,first-name,last-name,headline,summary)

# Search engine
play.search.path=tmp/data/search/
play.search.reindex=true
play.search.analyser=helpers.search.LinkItAnalyzer

# Dummy data
# Number of dummy members
dummy.members = 20
%geekweavers.dummy.members = 100
%cloudbees.dummy.members = 0
%cloudbees.dummy.members = 0
%cloudfoundry.dummy.members = 0
# Average number of links per member
dummy.averageLinksPerMember = 10
%geekweavers.dummy.averageLinksPerMember = 20
%cloudbees.dummy.averageLinksPerMember = 0
%cloudbees.dummy.averageLinksPerMember = 0
%cloudfoundry.dummy.averageLinksPerMember = 0
# Average number of comments per member. Will generate average number of session comments, and average number of article comments.
dummy.averageCommentsPerMember = 1
%cloudbees.dummy.averageCommentsPerMember = 0
%cloudbeestest.dummy.averageCommentsPerMember = 0
%cloudfoundry.dummy.averageCommentsPerMember = 0

# URL Ticketing
yurplan.url=http://yurplan.com/event/Mix-IT-2014/2834/tickets/widget

# URL Ticketing : test data
yurplan.api.event=1539
yurplan.api.asso=403
yurplan.api.key=mixit827ndh@ne
yurplan.api.url=http://yurplan.com/api.php/
yurplan.api.email=agnes007@no-log.org
yurplan.api.password=test007


# Google Analytics
application.analytics.trackingId=UA-8046496-2

# Configuration des mailings
linkit.mail.from=Mix-IT <contact@mix-it.fr>
# dailyBatchSize : nombre maximum quotidien de destinataires
# Très bas en dev pour le debug
linkit.mail.dailyBatchSize=3
%geekweavers.linkit.mail.dailyBatchSize=400
%cloudbees.linkit.mail.dailyBatchSize=1200
%cloudbeestest.linkit.mail.dailyBatchSize=1200
%cloudfoundry.linkit.mail.dailyBatchSize=1200

# Offlining CSS/JS files for developpement
offline.resources=true
%prod.offline.resources=false
%geekweavers.offline.resources=false
%cloudbees.offline.resources=false
%cloudbeestest.offline.resources=false
%cloudfoundry.offline.resources=false

# Defines wether the CFP is opened or closed
cfp.isOpen=false
%prod.cfp.isOpen=false
%geekweavers.cfp.isOpen=false
%cloudbees.cfp.isOpen=false
%cloudbeestest.cfp.isOpen=false
%cloudfoundry.cfp.isOpen=false
